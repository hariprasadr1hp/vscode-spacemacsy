{
    //jheader
    "jheader": {
        "prefix": "jheader",
        "body": [
            "#ifndef $1",
            "#define $1",
            "",
            "$0",
            "\n\n\n\n\n\n",
            "#endif //$1"
        ],
        "description": "creates header tags"
    },
    //jiostream
    "jiostream": {
        "prefix": "jiostream",
        "body": [
            "#include <iostream>$0",
        ],
        "description": "inserts #include <iostream>"
    },
    //jmath
    "jmath": {
        "prefix": "jmath",
        "body": [
            "#include \"math.h\"$0",
        ],
        "description": "inserts #include \"math.h\""
    },
    //jsamplecpp
    "jsamplecpp": {
        "prefix": "jsamplecpp",
        "body": [
            "#include <iostream>",
            "",
            "",
            "int main(int argc, char const *argv[])",
            "{",
            "\t$0;",
            "\treturn 0;",
            "}",
        ],
        "description": "creates barebone cpp"
    },
    //jmpistarter:
    "jmpistarter": {
        "prefix": "jmpistarter",
        "body": [
            "int rank, size,ierr;",
            "MPI_Status status;",
            "MPI_Request request;",
            "MPI_Comm MPI_COMM_WORLD;",
            "MPI_Init(&argc, &argv);",
            "MPI_Comm_rank(MPI_COMM_WORLD, &rank);",
            "MPI_Comm_size(MPI_COMM_WORLD, &size);",
            "MPI_Finalize();",
        ],
        "description": "code snippet for barebone mpi"
    },
    //jcout:
    "jcout": {
        "prefix": "jcout",
        "body": [
            "std::cout << $1 << std::endl;$0",
        ],
        "description": "code snippet for cout"
    },
    //jprint:
    "jprint": {
        "prefix": "jprint",
        "body": [
            "printf(\"$1\\n\"$2);$0",
        ],
        "description": "code snippet for printf"
    },
}