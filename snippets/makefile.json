{
	// Place your snippets for makefile here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	//jmake:
	"jmake": {
		"prefix": "jmake",
		"body": [		
			"MF=	Makefile",
			"",
			"CC=	g++",
			"CFLAGS=	-O3",
			"LFLAGS=	-lm",
			"",
			"EXE=main",
			"",
			"INC = \\",
			"\tlibmain.hpp \\",
			"\tmain_test.hpp",
			"",
			"SRC = \\",
			"\tmain.cpp \\",
			"\tlibmain.cpp \\",
			"\tmain_test.cpp",
			"",
			"############################################",
			"# No need to edit below this line",
			"#",
			"",
			".SUFFIXES:",
			".SUFFIXES: .cpp .o",
			"",
			"OBJ=	$(SRC:.cpp=.o)",
			"",
			".c.o:",
			"\t$(CC) $(CFLAGS) -c $<",
			"",
			"all:	$(EXE)",
			"",
			"$(OBJ):	$(INC)",
			"",
			"$(EXE):	$(OBJ)",
			"\t$(CC) $(CFLAGS) -o $@ $(OBJ) $(LFLAGS)",
			"",
			"$(OBJ):	$(MF)",
			"#############################################",
			"",
			"clean:",
			"\trm -f *.o $(EXE)",
			],
		"description": "boilerplate make file"
	},

}