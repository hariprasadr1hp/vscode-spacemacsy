{
	"jnumpy": {
		"prefix": "jnumpy",
		"body": [
			"import numpy as np",
			"$0"
		],
		"description": "import numpy library"
	},
	"jmatplot": {
		"prefix": "jmatplot",
		"body": [
			"import matplotlib.pyplot as plt",
			"$0"
		],
		"description": "import matplotlib.pyplot library"
	},
	"jprint": {
		"prefix": "jprint",
		"body": [
			"print(\"$1\".format($2))$0"
		],
		"description": "snippet for print"
	},
	"jmap":{
		"prefix": "jmap",
		"body": [
			"map($1, $2)$0"
		],
		"description": "snippet for map"
	},
	"jreduce":{
		"prefix": "jreduce",
		"body": [
			"reduce(lambda x, y: $1, $2)$0"
		],
		"description": "snippet for reduce"
	},
	"jsubprocess":{
		"prefix": "jsubprocess",
		"body": [
			"$1 = sub.run('$2',",
			"             capture_output=True,",
			"             text=True,",
			"             shell=True)",
			"$0"
		],
		"description": "snippet for subprocess"
	},
	"jcurry":{
		"prefix": "jcurry",
		"body": [
			"from functools import partial",
			"from inspect import signature",
			"def curry(func):",
    		"\tdef inner(arg):",
        	"\t\tif len(signature(func).parameters) == 1:",
            "\t\t\treturn func(arg)",
        	"\t\treturn curry(partial(func,arg))",
    		"\treturn inner",
			"$0"
		],
		"description": "decorator for currying"
	},
	"jtimeit":{
		"prefix": "jtimeit",
		"body": [
			"def timeit(method):",
			"\tdef timed(*args, **kwargs):",
			"\t\ttstart = time.time()",
			"\t\tresult = method(*args, **kwargs)",
			"\t\ttend = time.time()        ",
			"\t\tprint(\"Time taken for running '{}': {} second(s)\".format(method.__name__, (tend-tstart)))",
			"\t\treturn result",
			"\treturn timed",
			"$0"
		],
		"description": "decorator for timeit"
	},
	"jwith_open": {
		"prefix": "jwith_open",
		"body": [
			"with open($1,'$2') as $3:",
			"\t$0"
		],
		"description": "code snippet for open-file"
	},
	"jdoc": {
		"prefix": "jdoc",
		"body": [
			":type $1: $2",
			":param $1: $3$0"
		],
		"description": "snippet for arguments in the docstring"
	},
	"jjsonRead": {
		"prefix": "jjsonRead",
		"body": [
			"with open('$1.json', 'r') as rf:",
  			"\t$2 = json.load(rf)",
			"$0"
		],
		"description": "read a JSON file"
	},
	"jjsonWrite": {
		"prefix": "jjsonWrite",
		"body": [
			"with open('$1.json', 'w') as wf:",
			"\tjson.dump($2, wf, indent=4, sort_keys=False)",
			"$0"
		],
		"description": "write a JSON file"
	},
	"jyamlRead": {
		"prefix": "jyamlRead",
		"body": [
			"with open('$1.yml', 'r') as rf:",
			"\t$2 = yaml.load(rf, yaml.FullLoader)",
			"$0"
		],
		"description": "read a YAML file"
	},
	"jyamlWrite": {
		"prefix": "jyamlRead",
		"body": [
			"with open('$1.yml', 'w') as wf:",
			"\tyaml.dump($2, wf)",
			"$0"
		],
		"description": "read a YAML file"
	},
	"jhdf5Read": {
		"prefix": "jhdf5Read",
		"body": [
			"with h5py.File('$1.h5','r') as rf:",
			"\tcells = list(rf.items())",
			"\tdata = rf.get('$2')",
			"\t$3 = np.array(data)",
			"\tk = list(data.attrs.keys())",
			"\tv = list(data.attrs.values())",
			"$0"
		],
		"description": "read a HDF5 file"
	},
	"jhdf5Write": {
		"prefix": "jhdf5Write",
		"body": [
			"with h5py.File('$1.h5','w') as wf:",
			"\t$2 = wf.create_dataset('$3', data=$4)",
			"\t#set attributes",
			"\tdataset1.attrs['$5'] = '$6'",
			"$0"
		],
		"description": "write a HDF5 file"
	},
	"jsvgWrite": {
		"prefix": "jsvgWrite",
		"body": [
			"import xml.etree.ElementTree as ET",
			"",
			"svg_doc = ET.Element(",
			"\t\"svg\",",
			"\twidth=\"$1mm\",",
			"\theight=\"$2mm\",",
			"\tviewBox=\"0 0 $1 $2\",",
			")",
			"g = ET.SubElement(svg_doc, \"g\")",
			"tree = ET.ElementTree(svg_doc)",
			"tree.write(\"$3.svg\", encoding=\"UTF-8\", xml_declaration=True)",
			"$0"
		],
		"description": "writing svg file"
	},
	"jlineplot":{
		"prefix": "jlineplot",
		"body": [
			"plt.style.use('seaborn-notebook')",
			"plt.plot($1, $2, marker='o',label='plotlabel')",
			"plt.title('plot title')",
			"plt.legend()",
			"plt.xlabel('xlabel')",
			"plt.ylabel('ylabel')",
			"plt.grid(True)",
			"plt.xticks(np.arange(0,7,1))",
			"plt.yticks(np.arange(0,7,1))",
			"plt.tight_layout()",
			"plt.show()",
			"$0"
		],
		"description": "line plotting using matplotlib"
	},
	"jbsoup":{
		"prefix": "jbsoup",
		"body": [
			"import sys",
			"import requests",
			"from requests.exceptions import HTTPError",
			"from bs4 import BeautifulSoup",
			"",
			"urlpath = \"$1\"",
			"",
			"try:",
			"\tresponse = requests.get(urlpath)",
			"\tresponse.raise_for_status()",
			"\texcept HTTPError as http_err:",
			"\tprint(f'HTTP error occurred: {http_err}')",
			"\tsys.exit()",
			"# else:",
			"# print('Request Success!')",
			"",
			"response.encoding = 'utf-8'",
			"data = response.text",
			"soup = BeautifulSoup(data,'lxml')",
			"print(soup.prettify())",
			"#headlineintro = soup.find_all('span',{'class': 'headline-intro'})",
			"$0"
		],
		"description": "snippet for beautifulsoup"
	}

}